// database
datasource db {
  provider = "database type (i used postgresql, compatibility with other databases is not guaranteed)"
  url      = "database url including credentials"
}

// generator
generator client {
  provider = "prisma-client-py"
}

model User {
  snowflake              BigInt                @unique
  name                   String
  email                  String                @unique
  password               Bytes
  picture                Bytes
  messages               Message[]
  ownedServers           Server[]
  inServers              ServerUsersRelation[]
  friends                User[]                @relation("friends")
  user                   User?                 @relation("friends", fields: [userSnowflake], references: [snowflake])
  userSnowflake          BigInt?
  sessions               Session[]
  emailVerified          Boolean               @default(value: false)
  sentFriendRequests     FriendRequests[]      @relation("user")
  receivedFriendRequests FriendRequests[]      @relation("friend")
}

model Server {
  snowflake      BigInt                @unique
  name           String
  picture        Bytes
  ownerSnowflake BigInt
  owner          User                  @relation(fields: [userSnowflake], references: [snowflake], onDelete: Cascade)
  userSnowflake  BigInt
  members        ServerUsersRelation[]
  channels       Channel[]
  invites        ServerInvites[]
}

model ServerUsersRelation {
  id              Int    @id @default(autoincrement())
  server          Server @relation(fields: [serverSnowflake], references: [snowflake], onDelete: Cascade)
  user            User   @relation(fields: [userSnowflake], references: [snowflake], onDelete: Cascade)
  serverSnowflake BigInt
  userSnowflake   BigInt
}

model Channel {
  snowflake       BigInt    @unique
  name            String
  picture         Bytes?
  server          Server    @relation(fields: [serverSnowflake], references: [snowflake], onDelete: Cascade)
  serverSnowflake BigInt
  messages        Message[]
}

model Message {
  snowflake        BigInt  @unique
  content          String
  author           User    @relation(fields: [userSnowflake], references: [snowflake], onDelete: Cascade)
  userSnowflake    BigInt
  channel          Channel @relation(fields: [channelSnowflake], references: [snowflake], onDelete: Cascade)
  channelSnowflake BigInt
}

model Session {
  id            Int    @id @default(autoincrement())
  token         String @unique
  session_name  String
  user          User   @relation(fields: [userSnowflake], references: [snowflake], onDelete: Cascade)
  userSnowflake BigInt
}

// model UserFriendRelation {
//   id              Int    @id @default(autoincrement())
//   user            User   @relation("friends", fields: [userSnowflake], references: [snowflake])
//   friend          User   @relation("sdneirf", fields: [friendSnowflake], references: [snowflake])
//   userSnowflake   BigInt
//   friendSnowflake BigInt
// }

model FriendRequests {
  id              Int    @id @default(autoincrement())
  user            User   @relation("user", fields: [userSnowflake], references: [snowflake], onDelete: Cascade)
  friend          User   @relation("friend", fields: [friendSnowflake], references: [snowflake], onDelete: Cascade)
  userSnowflake   BigInt
  friendSnowflake BigInt
}

model ServerInvites {
  id              Int    @id @default(autoincrement())
  server          Server @relation(fields: [serverSnowflake], references: [snowflake], onDelete: Cascade)
  serverSnowflake BigInt
  invite          String @unique
}
